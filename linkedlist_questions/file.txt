PROBLEM=237
Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.

It is guaranteed that the node to be deleted is not a tail node in the list.


#***** SOLUTION ***
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):           
#         self.val = x                                      
#         self.next = None

class Solution:       
    def deleteNode(self, node):          
        """
        :type node: ListNode
        :rtype: void Do not return anything, modify node in-place instead.
        """
        if node.next==None:
            return 
        else:
            node.val=node.next.val
            node.next=node.next.next

PROBLEM=83
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.






***** SOLUTION *****
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head==None or head.next==None:
            return head
      
        prev=head
        p=head.next
        while p!=None:
            if p.val==prev.val:
                prev.next=p.next
                p=p.next      
            else:
                prev=p
                p=p.next
        return head            
            
